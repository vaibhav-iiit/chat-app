'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _classCallCheck2;

function _load_classCallCheck() {
  return _classCallCheck2 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));
}

var _createClass2;

function _load_createClass() {
  return _createClass2 = _interopRequireDefault(require('babel-runtime/helpers/createClass'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('xdl');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

var _publish;

function _load_publish() {
  return _publish = require('../publish');
}

var _BuildError;

function _load_BuildError() {
  return _BuildError = _interopRequireDefault(require('./BuildError'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BaseBuilder = function () {
  function BaseBuilder(projectDir, options) {
    (0, (_classCallCheck2 || _load_classCallCheck()).default)(this, BaseBuilder);
    this.projectDir = '';
    this.options = {
      wait: false,
      clearCredentials: false
    };

    this.projectDir = projectDir;
    this.options = options;
  }

  (0, (_createClass2 || _load_createClass()).default)(BaseBuilder, [{
    key: 'command',
    value: function () {
      var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee() {
        return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this._checkProjectConfig();

              case 3:
                _context.next = 5;
                return this.run();

              case 5:
                _context.next = 15;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context['catch'](0);

                if (_context.t0 instanceof (_BuildError || _load_BuildError()).default) {
                  _context.next = 13;
                  break;
                }

                throw _context.t0;

              case 13:
                (_log || _load_log()).default.error(_context.t0.message);
                process.exit(1);

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 7]]);
      }));

      function command() {
        return _ref.apply(this, arguments);
      }

      return command;
    }()
  }, {
    key: '_checkProjectConfig',
    value: function () {
      var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee2() {
        var _ref3, exp;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (_xdl || _load_xdl()).ProjectUtils.readConfigJsonAsync(this.projectDir);

              case 2:
                _ref3 = _context2.sent;
                exp = _ref3.exp;

                if (!exp.isDetached) {
                  _context2.next = 8;
                  break;
                }

                (_log || _load_log()).default.error('`exp build` is not supported for detached projects.');
                process.exit(1);
                return _context2.abrupt('return');

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _checkProjectConfig() {
        return _ref2.apply(this, arguments);
      }

      return _checkProjectConfig;
    }()
  }, {
    key: 'checkStatus',
    value: function () {
      var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee3() {
        var current = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var buildStatus;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._checkProjectConfig();

              case 2:

                (0, (_log || _load_log()).default)('Checking if current build exists...\n');

                _context3.next = 5;
                return (_xdl || _load_xdl()).Project.buildAsync(this.projectDir, {
                  mode: 'status',
                  current: current
                });

              case 5:
                buildStatus = _context3.sent;

                if (!buildStatus.err) {
                  _context3.next = 8;
                  break;
                }

                throw new Error('Error getting current build status for this project.');

              case 8:
                if (!(buildStatus.jobs && buildStatus.jobs.length)) {
                  _context3.next = 15;
                  break;
                }

                (_log || _load_log()).default.raw();
                (0, (_log || _load_log()).default)('============');
                (0, (_log || _load_log()).default)('Build Status');
                (0, (_log || _load_log()).default)('============\n');
                buildStatus.jobs.forEach(function (j) {
                  var platform = void 0;
                  if (j.platform === 'ios') {
                    platform = 'iOS';
                  } else {
                    platform = 'Android';
                  }

                  var status = void 0;
                  switch (j.status) {
                    case 'pending':
                      status = 'Build waiting in queue...';
                      break;
                    case 'started':
                      status = 'Build started...';
                      break;
                    case 'in-progress':
                      status = 'Build in progress...';
                      break;
                    case 'finished':
                      status = 'Build finished.';
                      break;
                    case 'errored':
                      status = 'There was an error with this build. Please try again.';
                      break;
                    default:
                      status = '';
                      break;
                  }

                  if (j.status !== 'finished') {
                    (0, (_log || _load_log()).default)(platform + ': ' + status);
                  } else {
                    (0, (_log || _load_log()).default)(platform + ':');
                    switch (j.platform) {
                      case 'ios':
                        if (!j.artifacts) {
                          (0, (_log || _load_log()).default)('Problem getting IPA URL. Please try build again.');
                          break;
                        }
                        (0, (_log || _load_log()).default)('IPA: ' + j.artifacts.url + '\n');
                        break;
                      case 'android':
                        if (!j.artifacts) {
                          (0, (_log || _load_log()).default)('Problem getting APK URL. Please try build again.');
                          break;
                        }
                        (0, (_log || _load_log()).default)('APK: ' + j.artifacts.url + '\n');
                        break;
                    }
                  }
                });

                throw new (_BuildError || _load_BuildError()).default('Cannot start new build, as there is a build in progress.');

              case 15:

                (0, (_log || _load_log()).default)('No currently active or previous builds for this project.');

              case 16:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function checkStatus() {
        return _ref4.apply(this, arguments);
      }

      return checkStatus;
    }()
  }, {
    key: 'publish',
    value: function () {
      var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee4() {
        var _ref6, expIds, url, err;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Begin publish
                (0, (_log || _load_log()).default)('Starting build process...');

                //run publish -- in future, we should determine whether we NEED to do this
                _context4.next = 3;
                return (0, (_publish || _load_publish()).action)(this.projectDir);

              case 3:
                _ref6 = _context4.sent;
                expIds = _ref6.ids;
                url = _ref6.url;
                err = _ref6.err;

                if (!err) {
                  _context4.next = 11;
                  break;
                }

                throw new (_BuildError || _load_BuildError()).default('No url was returned from publish. Please try again.\n' + err);

              case 11:
                if (!(!url || url === '')) {
                  _context4.next = 13;
                  break;
                }

                throw new (_BuildError || _load_BuildError()).default('No url was returned from publish. Please try again.');

              case 13:
                return _context4.abrupt('return', expIds);

              case 14:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function publish() {
        return _ref5.apply(this, arguments);
      }

      return publish;
    }()
  }, {
    key: 'build',
    value: function () {
      var _ref7 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee5(expIds, platform) {
        var opts, buildResp, ipaUrl, apkUrl, buildErr;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, (_log || _load_log()).default)('Building...');

                opts = {
                  mode: 'create',
                  expIds: expIds,
                  platform: platform
                };

                // call out to build api here with url

                _context5.next = 4;
                return (_xdl || _load_xdl()).Project.buildAsync(this.projectDir, opts);

              case 4:
                buildResp = _context5.sent;

                if (!this.options.wait) {
                  _context5.next = 18;
                  break;
                }

                ipaUrl = buildResp.ipaUrl, apkUrl = buildResp.apkUrl, buildErr = buildResp.buildErr;
                // do some stuff here

                if (!buildErr) {
                  _context5.next = 11;
                  break;
                }

                throw new (_BuildError || _load_BuildError()).default('Build failed with error.\n' + buildErr);

              case 11:
                if (!(!ipaUrl || ipaUrl === '' || !apkUrl || apkUrl === '')) {
                  _context5.next = 13;
                  break;
                }

                throw new (_BuildError || _load_BuildError()).default('No url was returned from the build process. Please try again.');

              case 13:

                (0, (_log || _load_log()).default)('IPA Url: ' + ipaUrl);
                (0, (_log || _load_log()).default)('APK Url: ' + apkUrl);

                (0, (_log || _load_log()).default)('Successfully built standalone app!');
                _context5.next = 19;
                break;

              case 18:
                (0, (_log || _load_log()).default)('Build successfully started, it may take a few minutes to complete. Run "exp build:status" to monitor it.');

              case 19:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function build(_x2, _x3) {
        return _ref7.apply(this, arguments);
      }

      return build;
    }()
  }]);
  return BaseBuilder;
}();

exports.default = BaseBuilder;
module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/build/BaseBuilder.js.map
