'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _getPrototypeOf;

function _load_getPrototypeOf() {
  return _getPrototypeOf = _interopRequireDefault(require('babel-runtime/core-js/object/get-prototype-of'));
}

var _classCallCheck2;

function _load_classCallCheck() {
  return _classCallCheck2 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));
}

var _createClass2;

function _load_createClass() {
  return _createClass2 = _interopRequireDefault(require('babel-runtime/helpers/createClass'));
}

var _possibleConstructorReturn2;

function _load_possibleConstructorReturn() {
  return _possibleConstructorReturn2 = _interopRequireDefault(require('babel-runtime/helpers/possibleConstructorReturn'));
}

var _inherits2;

function _load_inherits() {
  return _inherits2 = _interopRequireDefault(require('babel-runtime/helpers/inherits'));
}

var _fs = _interopRequireDefault(require('fs'));

var _path = _interopRequireDefault(require('path'));

var _inquirer;

function _load_inquirer() {
  return _inquirer = _interopRequireDefault(require('inquirer'));
}

var _untildify;

function _load_untildify() {
  return _untildify = _interopRequireDefault(require('untildify'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('xdl');
}

var _BaseBuilder2;

function _load_BaseBuilder() {
  return _BaseBuilder2 = _interopRequireDefault(require('./BaseBuilder'));
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Steps:
 * 1) Check for active builds -- only one build per user/experience can happen at once
 * 2) Check for Apple ID credentials for this user/experience
 * 		a) If they don't exist, prompt user to enter them. Submit them to server (/-/api/credentials/add),
 * 			 which will verify and store them.
 * 3) Check for valid cert for this user/experience
 * 		a) If valid cert doesn't exist, prompt user:
 * 	 			i) Do you have a certificate you'd like to use for signing this application, or would you like us
 * 	 				 to generate them for you?
 * 	 				 This is most common when you have other apps in the App Store, you're replacing an existing
 * 	 				 app in the App Store with an Exponent app, or you'd simply like more control over your Apple
 * 	 				 Developer account.
 * 	 	    ii) If they choose to upload a cert, ask them for the path to .p12 file. Upload the p12 (/-/api/credentials/add).
 * 	 	    iii) If they want us to manage it, call to /-/api/credentials/generate-certs, and verify that we were able to generate the cert
 * 	 	b) If a cert exists, the server will verify that it is still valid.
 * 4) Publish the experience from the local packager.
 * 5) Initiate build process.
 */
var IOSBuilder = function (_BaseBuilder) {
  (0, (_inherits2 || _load_inherits()).default)(IOSBuilder, _BaseBuilder);

  function IOSBuilder() {
    (0, (_classCallCheck2 || _load_classCallCheck()).default)(this, IOSBuilder);
    return (0, (_possibleConstructorReturn2 || _load_possibleConstructorReturn()).default)(this, (IOSBuilder.__proto__ || (0, (_getPrototypeOf || _load_getPrototypeOf()).default)(IOSBuilder)).apply(this, arguments));
  }

  (0, (_createClass2 || _load_createClass()).default)(IOSBuilder, [{
    key: 'run',
    value: function () {
      var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee() {
        var _ref2, _ref2$args, username, experienceName, bundleIdentifier, publishedExpIds;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(this.projectDir);

              case 2:
                _ref2 = _context.sent;
                _ref2$args = _ref2.args;
                username = _ref2$args.username;
                experienceName = _ref2$args.remoteFullPackageName;
                bundleIdentifier = _ref2$args.bundleIdentifierIOS;

                if (bundleIdentifier) {
                  _context.next = 9;
                  break;
                }

                throw new (_xdl || _load_xdl()).XDLError((_xdl || _load_xdl()).ErrorCode.INVALID_OPTIONS, 'Your project must have a bundleIdentifier set in exp.json. See https://docs.expo.io/versions/latest/guides/building-standalone-apps.html');

              case 9:
                _context.next = 11;
                return this.checkStatus();

              case 11:
                _context.prev = 11;
                _context.next = 14;
                return this.collectAndValidateCredentials(username, experienceName, bundleIdentifier);

              case 14:
                _context.next = 20;
                break;

              case 16:
                _context.prev = 16;
                _context.t0 = _context['catch'](11);

                (_log || _load_log()).default.error('Error validating credentials. You may need to clear them (with `-c`) and try again.');
                throw _context.t0;

              case 20:
                _context.next = 22;
                return this.publish();

              case 22:
                publishedExpIds = _context.sent;
                _context.next = 25;
                return this.build(publishedExpIds, 'ios');

              case 25:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[11, 16]]);
      }));

      function run() {
        return _ref.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: 'collectAndValidateCredentials',
    value: function () {
      var _ref3 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee2(username, experienceName, bundleIdentifier) {
        var credentialMetadata, existingCredentials, hasAppleId, hasCert, hasPushCert;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                credentialMetadata = {
                  username: username,
                  experienceName: experienceName,
                  bundleIdentifier: bundleIdentifier,
                  platform: 'ios'
                };


                (0, (_log || _load_log()).default)('Checking for existing Apple credentials...');
                _context2.next = 4;
                return (_xdl || _load_xdl()).Credentials.credentialsExistForPlatformAsync(credentialMetadata);

              case 4:
                existingCredentials = _context2.sent;
                hasAppleId = void 0, hasCert = void 0, hasPushCert = void 0;

                if (this.options.clearCredentials || !existingCredentials) {
                  hasAppleId = false;
                  hasCert = false;
                  hasPushCert = false;
                } else if (existingCredentials) {
                  hasAppleId = !!existingCredentials.appleId;
                  hasCert = !!existingCredentials.certP12;
                  hasPushCert = !!existingCredentials.pushP12;
                }

                if (hasAppleId) {
                  _context2.next = 12;
                  break;
                }

                _context2.next = 10;
                return this.askForAppleId(credentialMetadata);

              case 10:
                _context2.next = 15;
                break;

              case 12:
                (0, (_log || _load_log()).default)('Validating Apple credentials...');
                _context2.next = 15;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'appleId', null, credentialMetadata);

              case 15:
                (0, (_log || _load_log()).default)('Credentials valid.');

                if (hasCert) {
                  _context2.next = 21;
                  break;
                }

                _context2.next = 19;
                return this.askForCerts(credentialMetadata);

              case 19:
                _context2.next = 24;
                break;

              case 21:
                (0, (_log || _load_log()).default)('Validating distribution certificate...');
                _context2.next = 24;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'cert', null, credentialMetadata);

              case 24:
                _context2.prev = 24;

                (0, (_log || _load_log()).default)('Validating app id...');
                _context2.next = 28;
                return (_xdl || _load_xdl()).Credentials.ensureAppId(credentialMetadata);

              case 28:
                _context2.next = 33;
                break;

              case 30:
                _context2.prev = 30;
                _context2.t0 = _context2['catch'](24);
                throw new (_xdl || _load_xdl()).XDLError((_xdl || _load_xdl()).ErrorCode.CREDENTIAL_ERROR, 'It seems like we can\'t create an app on the Apple developer center with this app id: ' + bundleIdentifier + '. Please change your bundle identifier to something else.');

              case 33:
                if (hasPushCert) {
                  _context2.next = 38;
                  break;
                }

                _context2.next = 36;
                return this.askForPushCerts(credentialMetadata);

              case 36:
                _context2.next = 41;
                break;

              case 38:
                (0, (_log || _load_log()).default)('Validating push certificate...');
                _context2.next = 41;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'push', null, credentialMetadata);

              case 41:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[24, 30]]);
      }));

      function collectAndValidateCredentials(_x, _x2, _x3) {
        return _ref3.apply(this, arguments);
      }

      return collectAndValidateCredentials;
    }()
  }, {
    key: 'askForAppleId',
    value: function () {
      var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee3(credentialMetadata) {
        var questions, answers, credentials;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // ask for creds
                console.log('');
                console.log('We need your Apple ID/password to manage certificates and provisioning profiles from your Apple Developer account.');
                questions = [{
                  type: 'input',
                  name: 'appleId',
                  message: 'What\'s your Apple ID?',
                  validate: function validate(val) {
                    return val !== '';
                  }
                }, {
                  type: 'password',
                  name: 'password',
                  message: 'Password?',
                  validate: function validate(val) {
                    return val !== '';
                  }
                }, {
                  type: 'input',
                  name: 'teamId',
                  message: 'What is your Apple Team ID (you can find that on this page: https://developer.apple.com/account/#/membership)?',
                  validate: function validate(val) {
                    return val !== '';
                  }
                }];
                _context3.next = 5;
                return (_inquirer || _load_inquirer()).default.prompt(questions);

              case 5:
                answers = _context3.sent;
                credentials = {
                  appleId: answers.appleId,
                  password: answers.password,
                  teamId: answers.teamId
                };


                (0, (_log || _load_log()).default)('Validating Apple credentials...');
                _context3.next = 10;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'appleId', credentials, credentialMetadata);

              case 10:
                _context3.next = 12;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('ios', credentials, credentialMetadata);

              case 12:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function askForAppleId(_x4) {
        return _ref4.apply(this, arguments);
      }

      return askForAppleId;
    }()
  }, {
    key: 'askForCerts',
    value: function () {
      var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee5(credentialMetadata) {
        var _this2 = this;

        var questions, answers, p12Data, credentials;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // ask about certs
                console.log('');

                questions = [{
                  type: 'rawlist',
                  name: 'manageCertificates',
                  message: 'Do you already have a distribution certificate you\'d like us to use,\nor do you want us to manage your certificates for you?',
                  choices: [{ name: 'Let Exponent handle the process!', value: true }, { name: 'I want to upload my own certificate!', value: false }]
                }, {
                  type: 'input',
                  name: 'pathToP12',
                  message: 'Path to P12 file:',
                  validate: function () {
                    var _ref6 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee4(p12Path) {
                      var stats;
                      return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              _context4.prev = 0;
                              _context4.next = 3;
                              return _fs.default.stat.promise(p12Path);

                            case 3:
                              stats = _context4.sent;
                              return _context4.abrupt('return', stats.isFile());

                            case 7:
                              _context4.prev = 7;
                              _context4.t0 = _context4['catch'](0);

                              // file does not exist
                              console.log('\nFile does not exist.');
                              return _context4.abrupt('return', false);

                            case 11:
                            case 'end':
                              return _context4.stop();
                          }
                        }
                      }, _callee4, _this2, [[0, 7]]);
                    }));

                    return function validate(_x6) {
                      return _ref6.apply(this, arguments);
                    };
                  }(),
                  filter: function filter(p12Path) {
                    p12Path = (0, (_untildify || _load_untildify()).default)(p12Path);
                    if (!_path.default.isAbsolute(p12Path)) {
                      p12Path = _path.default.resolve(p12Path);
                    }
                    return p12Path;
                  },
                  when: function when(answers) {
                    return !answers.manageCertificates;
                  }
                }, {
                  type: 'password',
                  name: 'certPassword',
                  message: 'Certificate P12 password (empty is OK):',
                  when: function when(answers) {
                    return !answers.manageCertificates;
                  }
                }];
                _context5.next = 4;
                return (_inquirer || _load_inquirer()).default.prompt(questions);

              case 4:
                answers = _context5.sent;

                if (!answers.manageCertificates) {
                  _context5.next = 11;
                  break;
                }

                // Attempt to fetch new certificates
                (0, (_log || _load_log()).default)('Generating distribution certificate...');
                _context5.next = 9;
                return (_xdl || _load_xdl()).Credentials.fetchAppleCertificates(credentialMetadata);

              case 9:
                _context5.next = 20;
                break;

              case 11:
                _context5.next = 13;
                return _fs.default.readFile.promise(answers.pathToP12);

              case 13:
                p12Data = _context5.sent;
                credentials = {
                  certP12: p12Data.toString('base64'),
                  certPassword: answers.certPassword
                };


                (0, (_log || _load_log()).default)('Validating distribution certificate...');
                _context5.next = 18;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'cert', credentials, credentialMetadata);

              case 18:
                _context5.next = 20;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('ios', credentials, credentialMetadata);

              case 20:
                (0, (_log || _load_log()).default)('Distribution certificate setup complete.');

              case 21:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function askForCerts(_x5) {
        return _ref5.apply(this, arguments);
      }

      return askForCerts;
    }()
  }, {
    key: 'askForPushCerts',
    value: function () {
      var _ref7 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee7(credentialMetadata) {
        var _this3 = this;

        var questions, answers, p12Data, credentials;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // ask about certs

                questions = [{
                  type: 'rawlist',
                  name: 'managePushCertificates',
                  message: 'Do you already have a push notification certificate you\'d like us to use,\nor do you want us to manage your push certificates for you?',
                  choices: [{ name: 'Let Exponent handle the process!', value: true }, { name: 'I want to upload my own certificate!', value: false }]
                }, {
                  type: 'input',
                  name: 'pathToP12',
                  message: 'Path to P12 file:',
                  validate: function () {
                    var _ref8 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee6(p12Path) {
                      var stats;
                      return (_regenerator || _load_regenerator()).default.wrap(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              _context6.prev = 0;
                              _context6.next = 3;
                              return _fs.default.stat.promise(p12Path);

                            case 3:
                              stats = _context6.sent;
                              return _context6.abrupt('return', stats.isFile());

                            case 7:
                              _context6.prev = 7;
                              _context6.t0 = _context6['catch'](0);

                              // file does not exist
                              console.log('\nFile does not exist.');
                              return _context6.abrupt('return', false);

                            case 11:
                            case 'end':
                              return _context6.stop();
                          }
                        }
                      }, _callee6, _this3, [[0, 7]]);
                    }));

                    return function validate(_x8) {
                      return _ref8.apply(this, arguments);
                    };
                  }(),
                  filter: function filter(p12Path) {
                    p12Path = (0, (_untildify || _load_untildify()).default)(p12Path);
                    if (!_path.default.isAbsolute(p12Path)) {
                      p12Path = _path.default.resolve(p12Path);
                    }
                    return p12Path;
                  },
                  when: function when(answers) {
                    return !answers.managePushCertificates;
                  }
                }, {
                  type: 'password',
                  name: 'pushPassword',
                  message: 'Push certificate P12 password (empty is OK):',
                  when: function when(answers) {
                    return !answers.managePushCertificates;
                  }
                }];
                _context7.next = 3;
                return (_inquirer || _load_inquirer()).default.prompt(questions);

              case 3:
                answers = _context7.sent;

                if (!answers.managePushCertificates) {
                  _context7.next = 10;
                  break;
                }

                // Attempt to fetch new certificates
                (0, (_log || _load_log()).default)('Fetching a new push certificate...');
                _context7.next = 8;
                return (_xdl || _load_xdl()).Credentials.fetchPushCertificates(credentialMetadata);

              case 8:
                _context7.next = 19;
                break;

              case 10:
                _context7.next = 12;
                return _fs.default.readFile.promise(answers.pathToP12);

              case 12:
                p12Data = _context7.sent;
                credentials = {
                  pushP12: p12Data.toString('base64'),
                  pushPassword: answers.pushPassword
                };


                (0, (_log || _load_log()).default)('Validating push certificate...');
                _context7.next = 17;
                return (_xdl || _load_xdl()).Credentials.validateCredentialsForPlatform('ios', 'push', credentials, credentialMetadata);

              case 17:
                _context7.next = 19;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('ios', credentials, credentialMetadata);

              case 19:
                (0, (_log || _load_log()).default)('Push certificate setup complete.');

              case 20:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function askForPushCerts(_x7) {
        return _ref7.apply(this, arguments);
      }

      return askForPushCerts;
    }()
  }]);
  return IOSBuilder;
}((_BaseBuilder2 || _load_BaseBuilder()).default);

exports.default = IOSBuilder;
module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/build/IOSBuilder.js.map
