'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise;

function _load_promise() {
  return _promise = _interopRequireDefault(require('babel-runtime/core-js/promise'));
}

var _getIterator2;

function _load_getIterator() {
  return _getIterator2 = _interopRequireDefault(require('babel-runtime/core-js/get-iterator'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var checkForUpdateAsync = function () {
  var _ref3 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee3() {
    var _ref4, state, current, latest, message;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (_update || _load_update()).default.checkForExpUpdateAsync();

          case 2:
            _ref4 = _context3.sent;
            state = _ref4.state;
            current = _ref4.current;
            latest = _ref4.latest;
            message = void 0;
            _context3.t0 = state;
            _context3.next = _context3.t0 === 'up-to-date' ? 10 : _context3.t0 === 'out-of-date' ? 11 : _context3.t0 === 'ahead-of-published' ? 14 : 15;
            break;

          case 10:
            return _context3.abrupt('break', 16);

          case 11:
            message = 'There is a new version of exp available (' + latest + ').\nYou are currently using exp ' + current + '\nRun `npm install -g exp` to get the latest version';
            (_crayon || _load_crayon()).default.green.error(message);
            return _context3.abrupt('break', 16);

          case 14:
            return _context3.abrupt('break', 16);

          case 15:
            (_log || _load_log()).default.error('Confused about what version of exp you have?');

          case 16:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function checkForUpdateAsync() {
    return _ref3.apply(this, arguments);
  };
}();

var writePathAsync = function () {
  var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee4() {
    var subCommand;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            subCommand = process.argv[2];

            if (!(subCommand === 'prepare-detached-build')) {
              _context4.next = 3;
              break;
            }

            return _context4.abrupt('return');

          case 3:
            _context4.next = 5;
            return (_xdl || _load_xdl()).Binaries.writePathToUserSettingsAsync();

          case 5:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function writePathAsync() {
    return _ref5.apply(this, arguments);
  };
}();

exports.run = run;

require('instapromise');

var _progress;

function _load_progress() {
  return _progress = _interopRequireDefault(require('progress'));
}

var _lodashNode;

function _load_lodashNode() {
  return _lodashNode = _interopRequireDefault(require('lodash-node'));
}

var _bunyan;

function _load_bunyan() {
  return _bunyan = _interopRequireDefault(require('bunyan'));
}

var _crayon;

function _load_crayon() {
  return _crayon = _interopRequireDefault(require('@ccheever/crayon'));
}

var _glob;

function _load_glob() {
  return _glob = _interopRequireDefault(require('glob'));
}

var _path = _interopRequireDefault(require('path'));

var _simpleSpinner;

function _load_simpleSpinner() {
  return _simpleSpinner = _interopRequireDefault(require('@exponent/simple-spinner'));
}

var _url = _interopRequireDefault(require('url'));

var _commander;

function _load_commander() {
  return _commander = _interopRequireDefault(require('commander'));
}

var _commander2;

function _load_commander2() {
  return _commander2 = require('commander');
}

var _xdl;

function _load_xdl() {
  return _xdl = require('xdl');
}

var _accounts;

function _load_accounts() {
  return _accounts = require('./accounts');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('./log'));
}

var _update;

function _load_update() {
  return _update = _interopRequireDefault(require('./update'));
}

var _urlOpts;

function _load_urlOpts() {
  return _urlOpts = _interopRequireDefault(require('./urlOpts'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (process.env.NODE_ENV === 'development') {
  require('source-map-support').install();
}

(_commander2 || _load_commander2()).Command.prototype.urlOpts = function () {
  (_urlOpts || _load_urlOpts()).default.addOptions(this);
  return this;
};

(_commander2 || _load_commander2()).Command.prototype.allowOffline = function () {
  this.option('--offline', 'Allows this command to run while offline');
  return this;
};

(_commander2 || _load_commander2()).Command.prototype.allowNonInteractive = function () {
  this.option('--non-interactive', 'Fails if an interactive prompt would be required to continue.');
  return this;
};

(_commander2 || _load_commander2()).Command.prototype.asyncAction = function (asyncFn, skipUpdateCheck) {
  var _this = this;

  return this.action(function () {
    var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var options;
      return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (skipUpdateCheck) {
                _context.next = 8;
                break;
              }

              _context.prev = 1;
              _context.next = 4;
              return checkForUpdateAsync();

            case 4:
              _context.next = 8;
              break;

            case 6:
              _context.prev = 6;
              _context.t0 = _context['catch'](1);

            case 8:
              _context.prev = 8;
              options = (_lodashNode || _load_lodashNode()).default.last(args);

              if (options.output === 'raw') {
                (_log || _load_log()).default.config.raw = true;
              }
              if (options.offline) {
                (_xdl || _load_xdl()).Config.offline = true;
              }
              _context.next = 14;
              return asyncFn.apply(undefined, args);

            case 14:
              _context.next = 20;
              break;

            case 16:
              _context.prev = 16;
              _context.t1 = _context['catch'](8);

              if (_context.t1._isCommandError) {
                (_log || _load_log()).default.error(_context.t1.message);
              } else if (_context.t1._isApiError) {
                (_log || _load_log()).default.error((_crayon || _load_crayon()).default.red(_context.t1.message));
              } else if (_context.t1.isXDLError) {
                (_log || _load_log()).default.error(_context.t1.message);
              } else {
                (_log || _load_log()).default.error(_context.t1.message);
                (_crayon || _load_crayon()).default.gray.error(_context.t1.stack);
              }
              process.exit(1);

            case 20:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this, [[1, 6], [8, 16]]);
    }));

    return function () {
      return _ref.apply(this, arguments);
    };
  }());
};

(_commander2 || _load_commander2()).Command.prototype.asyncActionProjectDir = function (asyncFn, skipProjectValidation, skipAuthCheck) {
  var _this2 = this;

  return this.asyncAction(function () {
    var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee2(projectDir) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var opts, logLines, logWithLevel, bar, packagerLogsStream, status;
      return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return checkForUpdateAsync();

            case 3:
              _context2.next = 7;
              break;

            case 5:
              _context2.prev = 5;
              _context2.t0 = _context2['catch'](0);

            case 7:
              opts = args[0];

              if (!(!skipAuthCheck && !opts.nonInteractive && !opts.offline)) {
                _context2.next = 11;
                break;
              }

              _context2.next = 11;
              return (0, (_accounts || _load_accounts()).loginOrRegisterIfLoggedOut)();

            case 11:
              if (skipAuthCheck) {
                _context2.next = 14;
                break;
              }

              _context2.next = 14;
              return (_xdl || _load_xdl()).User.ensureLoggedInAsync();

            case 14:

              if (!projectDir) {
                projectDir = process.cwd();
              } else {
                projectDir = _path.default.resolve(process.cwd(), projectDir);
              }

              logLines = function logLines(msg, logFn) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = (0, (_getIterator2 || _load_getIterator()).default)(msg.split('\n')), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var line = _step.value;

                    logFn(line);
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
              };

              logWithLevel = function logWithLevel(chunk) {
                if (!chunk.msg) {
                  return;
                }
                if (chunk.level <= (_bunyan || _load_bunyan()).default.INFO) {
                  logLines(chunk.msg, (_log || _load_log()).default);
                } else if (chunk.level === (_bunyan || _load_bunyan()).default.WARN) {
                  logLines(chunk.msg, (_log || _load_log()).default.warn);
                } else {
                  logLines(chunk.msg, (_log || _load_log()).default.error);
                }
              };

              bar = void 0;
              packagerLogsStream = new (_xdl || _load_xdl()).PackagerLogsStream({
                projectRoot: projectDir,
                onStartBuildBundle: function onStartBuildBundle() {
                  bar = new (_progress || _load_progress()).default('Building JavaScript bundle [:bar] :percent', {
                    total: 100,
                    clear: true,
                    complete: '=',
                    incomplete: ' '
                  });

                  (_log || _load_log()).default.setBundleProgressBar(bar);
                },
                onProgressBuildBundle: function onProgressBuildBundle(percent) {
                  if (!bar || bar.complete) return;
                  var ticks = percent - bar.curr;
                  ticks > 0 && bar.tick(ticks);
                },
                onFinishBuildBundle: function onFinishBuildBundle(err, startTime, endTime) {
                  if (bar && !bar.complete) {
                    bar.tick(100 - bar.curr);
                  }

                  if (bar) {
                    (_log || _load_log()).default.setBundleProgressBar(null);
                    bar = null;

                    if (err) {
                      (0, (_log || _load_log()).default)((_crayon || _load_crayon()).default.red('Failed building JavaScript bundle.'));
                    } else {
                      (0, (_log || _load_log()).default)((_crayon || _load_crayon()).default.green('Finished building JavaScript bundle in ' + (endTime - startTime) + 'ms.'));
                    }
                  }
                },
                updateLogs: function updateLogs(updater) {
                  var newLogChunks = updater([]);
                  newLogChunks.forEach(function (newLogChunk) {
                    logWithLevel(newLogChunk);
                  });
                }
              });

              // needed for validation logging to function

              (_xdl || _load_xdl()).ProjectUtils.attachLoggerStream(projectDir, {
                stream: {
                  write: function write(chunk) {
                    if (chunk.tag === 'device') {
                      logWithLevel(chunk);
                    }
                  }
                },
                type: 'raw'
              });

              // the existing CLI modules only pass one argument to this function, so skipProjectValidation
              // will be undefined in most cases. we can explicitly pass a truthy value here to avoid validation (eg for init)

              if (skipProjectValidation) {
                _context2.next = 30;
                break;
              }

              (0, (_log || _load_log()).default)('Making sure project is set up correctly...');
              (_simpleSpinner || _load_simpleSpinner()).default.start();
              // validate that this is a good projectDir before we try anything else
              _context2.next = 25;
              return (_xdl || _load_xdl()).Doctor.validateLowLatencyAsync(projectDir);

            case 25:
              status = _context2.sent;

              if (!(status === (_xdl || _load_xdl()).Doctor.FATAL)) {
                _context2.next = 28;
                break;
              }

              throw new Error('Invalid project directory. See above logs for information.');

            case 28:
              (_simpleSpinner || _load_simpleSpinner()).default.stop();
              (0, (_log || _load_log()).default)('Your project looks good!');

            case 30:
              return _context2.abrupt('return', asyncFn.apply(undefined, [projectDir].concat(args)));

            case 31:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this2, [[0, 5]]);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), true);
};

function runAsync() {
  try {
    (_xdl || _load_xdl()).Analytics.setSegmentNodeKey('vGu92cdmVaggGA26s3lBX6Y5fILm8SQ7');
    (_xdl || _load_xdl()).Analytics.setVersionName(require('../package.json').version);
    _registerLogs();

    if (process.env.SERVER_URL) {
      var serverUrl = process.env.SERVER_URL;
      if (!serverUrl.startsWith('http')) {
        serverUrl = 'http://' + serverUrl;
      }
      var parsedUrl = _url.default.parse(serverUrl);
      (_xdl || _load_xdl()).Config.api.host = parsedUrl.hostname;
      (_xdl || _load_xdl()).Config.api.port = parsedUrl.port;
    }

    (_xdl || _load_xdl()).Config.developerTool = 'exp';

    (_commander || _load_commander()).default.name = 'exp';
    (_commander || _load_commander()).default.version(require('../package.json').version).option('-o, --output [format]', 'Output format. pretty (default), raw');
    (_glob || _load_glob()).default.sync('commands/*.js', {
      cwd: __dirname
    }).forEach(function (file) {
      var commandModule = require('./' + file);
      if (typeof commandModule === 'function') {
        commandModule((_commander || _load_commander()).default);
      } else if (typeof commandModule.default === 'function') {
        commandModule.default((_commander || _load_commander()).default);
      } else {
        (_log || _load_log()).default.error('\'' + file + '.js\' is not a properly formatted command.');
      }
    });

    if (process.env.EXPO_DEBUG) {
      (_glob || _load_glob()).default.sync('debug_commands/*.js', {
        cwd: __dirname
      }).forEach(function (file) {
        require('./' + file)((_commander || _load_commander()).default);
      });
    }

    (_commander || _load_commander()).default.parse(process.argv);

    var subCommand = process.argv[2];
    if (subCommand) {
      var commands = [];
      (_commander || _load_commander()).default.commands.forEach(function (command) {
        commands.push(command['_name']);
        var alias = command['_alias'];
        if (alias) {
          commands.push(alias);
        }
      });
      if (!(_lodashNode || _load_lodashNode()).default.includes(commands, subCommand)) {
        console.log('"' + subCommand + '" is not an exp command. See "exp --help" for the full list of commands.');
      }
    } else {
      (_commander || _load_commander()).default.help();
    }
  } catch (e) {
    console.error(e);
    throw e;
  }
}

function _registerLogs() {
  var stream = {
    stream: {
      write: function write(chunk) {
        if (chunk.code) {
          switch (chunk.code) {
            case (_xdl || _load_xdl()).NotificationCode.START_LOADING:
              (_simpleSpinner || _load_simpleSpinner()).default.start();
              return;
            case (_xdl || _load_xdl()).NotificationCode.STOP_LOADING:
              (_simpleSpinner || _load_simpleSpinner()).default.stop();
              return;
            case (_xdl || _load_xdl()).NotificationCode.DOWNLOAD_CLI_PROGRESS:
              return;
          }
        }

        if (chunk.level === (_bunyan || _load_bunyan()).default.INFO) {
          (0, (_log || _load_log()).default)(chunk.msg);
        } else if (chunk.level === (_bunyan || _load_bunyan()).default.WARN) {
          (_log || _load_log()).default.warn(chunk.msg);
        } else if (chunk.level >= (_bunyan || _load_bunyan()).default.ERROR) {
          (_log || _load_log()).default.error(chunk.msg);
        }
      }
    },
    type: 'raw'
  };

  (_xdl || _load_xdl()).Logger.notifications.addStream(stream);
  (_xdl || _load_xdl()).Logger.global.addStream(stream);
}

function run() {
  (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)((_regenerator || _load_regenerator()).default.mark(function _callee5() {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return (_promise || _load_promise()).default.all([writePathAsync(), runAsync()]);

          case 2:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }))().catch(function (e) {
    console.error('Uncaught Error', e);
    process.exit(1);
  });
}
//# sourceMappingURL=__sourcemaps__/exp.js.map
