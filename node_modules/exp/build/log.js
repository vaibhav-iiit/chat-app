'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

var _crayon;

function _load_crayon() {
  return _crayon = _interopRequireDefault(require('@ccheever/crayon'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _bundleProgressBar = void 0;

function respectProgressBars(commitLogs) {
  if (_bundleProgressBar) {
    _bundleProgressBar.terminate();
    _bundleProgressBar.lastDraw = '';
    commitLogs();
    _bundleProgressBar.render();
  } else {
    commitLogs();
  }
}

function log() {
  if (log.config.raw) {
    return;
  }
  var prefix = (_crayon || _load_crayon()).default.gray('[') + (_crayon || _load_crayon()).default.gray('exp') + (_crayon || _load_crayon()).default.gray(']');
  var args = [prefix].concat(Array.prototype.slice.call(arguments, 0));

  respectProgressBars(function () {
    var _console;

    (_console = console).log.apply(_console, (0, (_toConsumableArray2 || _load_toConsumableArray()).default)(args));
  });
}

log.setBundleProgressBar = function setBundleProgressBar(bar) {
  _bundleProgressBar = bar;
};

log.error = function error() {
  if (log.config.raw) {
    return;
  }
  var prefix = (_crayon || _load_crayon()).default.red('[') + (_crayon || _load_crayon()).default.gray('exp') + (_crayon || _load_crayon()).default.red(']');
  var args = [prefix].concat(Array.prototype.slice.call(arguments, 0).map(function (x) {
    return (_crayon || _load_crayon()).default.red(x);
  }));

  respectProgressBars(function () {
    var _console2;

    (_console2 = console).error.apply(_console2, (0, (_toConsumableArray2 || _load_toConsumableArray()).default)(args));
  });
};

log.warn = function warn() {
  if (log.config.raw) {
    return;
  }
  var prefix = (_crayon || _load_crayon()).default.yellow('[') + (_crayon || _load_crayon()).default.gray('exp') + (_crayon || _load_crayon()).default.yellow(']');
  var args = [prefix].concat(Array.prototype.slice.call(arguments, 0).map(function (x) {
    return (_crayon || _load_crayon()).default.yellow(x);
  }));

  respectProgressBars(function () {
    var _console3;

    (_console3 = console).warn.apply(_console3, (0, (_toConsumableArray2 || _load_toConsumableArray()).default)(args));
  });
};

log.gray = function () {
  if (log.config.raw) {
    return;
  }
  var prefix = '[exp]';
  var args = [prefix].concat(Array.prototype.slice.call(arguments, 0));

  respectProgressBars(function () {
    var _crayon$gray;

    (_crayon$gray = (_crayon || _load_crayon()).default.gray).error.apply(_crayon$gray, (0, (_toConsumableArray2 || _load_toConsumableArray()).default)(args));
  });
};

log.raw = function () {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (!log.config.raw) {
    return;
  }

  respectProgressBars(function () {
    var _console4;

    (_console4 = console).log.apply(_console4, args);
  });
};

log.crayon = (_crayon || _load_crayon()).default;

log.config = {
  raw: false
};

exports.default = log;
module.exports = exports['default'];
//# sourceMappingURL=__sourcemaps__/log.js.map
