{"version":3,"sources":["update.js"],"names":["join","__dirname","getAsync","currentExpVersionAsync","current","UpdateCacher","latest","latestVersionExp","state","compare","Error","checkForExpUpdateAsync","Cacher","packageName","exec","version_","_","trimmed","trim"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;+HA6BA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACS,4CAAa,cAAKA,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,cAA3B,CAAb,EAAyDC,QAAzD,CACL,SADK,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,sB;;;;;;+HAMf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACwBA,wBADxB;;AAAA;AACQC,mBADR;AAAA;AAAA,mBAI6CC,aAAaH,QAAb,EAJ7C;;AAAA;AAAA;AAI4BI,kBAJ5B,SAIUC,gBAJV;AAMMC,iBANN;AAAA,2BAOU,oCAAOC,OAAP,CAAeL,OAAf,EAAwBE,MAAxB,CAPV;AAAA,8CAQS,CAAC,CARV,yBAYS,CAZT,yBAgBS,CAhBT;AAAA;;AAAA;AASME,oBAAQ,aAAR;AATN;;AAAA;AAaMA,oBAAQ,YAAR;AAbN;;AAAA;AAiBMA,oBAAQ,oBAAR;AAjBN;;AAAA;AAAA,kBAqBY,IAAIE,KAAJ,CAAU,iDAAV,CArBZ;;AAAA;AAAA,8CAwBS;AACLF,0BADK;AAELJ,8BAFK;AAGLE;AAHK,aAxBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,sB;;;;;;;AA/Bf;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AAEA,IAAMN,eAAe,IAAI,8BAAQO,MAAZ,kHACnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAC4B,4CACxB,cAAKZ,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,cAA3B,CADwB,EAExBC,QAFwB,CAEf,MAFe,CAD5B;;AAAA;AACQW,qBADR;AAAA;AAAA,iBAI8B,kDAAcC,IAAd,eACdD,WADc,cAJ9B;;AAAA;AAAA;AAAA;AAISE,kBAJT;AAImBC,WAJnB;AAOQC,iBAPR,GAOkBF,SAASG,IAAT,EAPlB;AAAA,2CASS;AACLX,8BAAkBU;AADb,WATT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADmB,IAcnB,kBAdmB,EAenB,KAAK,EAAL,GAAU,EAAV,GAAe,IAfI,CAeC;AAfD,CAArB;;kBAuDe;AACbd,gDADa;AAEbQ;AAFa,C","file":"../update.js","sourcesContent":["/**\n * @flow\n */\n\nimport child_process from 'mz/child_process';\nimport JsonFile from '@exponent/json-file';\nimport path from 'path';\nimport semver from 'semver';\n\nimport { FsCache, UserSettings } from 'xdl';\n\nconst UpdateCacher = new FsCache.Cacher(\n  async () => {\n    const packageName = await new JsonFile(\n      path.join(__dirname, '..', 'package.json')\n    ).getAsync('name');\n    const [version_, _] = await child_process.exec(\n      `npm view ${packageName} version`\n    );\n    const trimmed = version_.trim();\n\n    return {\n      latestVersionExp: trimmed,\n    };\n  },\n  'exp-updates.json',\n  24 * 60 * 60 * 1000 // one day\n);\n\nasync function currentExpVersionAsync() {\n  return new JsonFile(path.join(__dirname, '..', 'package.json')).getAsync(\n    'version'\n  );\n}\n\nasync function checkForExpUpdateAsync() {\n  const current = await currentExpVersionAsync();\n\n  // check for an outdated install based on either a fresh npm query or our cache\n  const { latestVersionExp: latest } = await UpdateCacher.getAsync();\n\n  let state;\n  switch (semver.compare(current, latest)) {\n    case -1:\n      state = 'out-of-date';\n      break;\n\n    case 0:\n      state = 'up-to-date';\n      break;\n\n    case 1:\n      state = 'ahead-of-published';\n      break;\n\n    default:\n      throw new Error('Confused about whether exp is up-to-date or not');\n  }\n\n  return {\n    state,\n    current,\n    latest,\n  };\n}\n\nexport default {\n  currentExpVersionAsync,\n  checkForExpUpdateAsync,\n};\n"],"sourceRoot":"/Users/jesseruder/exponent/universe/dev/exp/src"}