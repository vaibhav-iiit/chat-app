{"version":3,"sources":["exp.js"],"names":["checkForExpUpdateAsync","state","current","latest","message","green","error","checkForUpdateAsync","subCommand","process","argv","writePathToUserSettingsAsync","writePathAsync","run","env","NODE_ENV","require","install","prototype","urlOpts","addOptions","allowOffline","option","allowNonInteractive","asyncAction","asyncFn","skipUpdateCheck","action","args","options","last","output","config","raw","offline","_isCommandError","_isApiError","red","isXDLError","gray","stack","exit","asyncActionProjectDir","skipProjectValidation","skipAuthCheck","projectDir","opts","nonInteractive","ensureLoggedInAsync","cwd","resolve","logLines","msg","logFn","split","line","logWithLevel","chunk","level","INFO","WARN","warn","bar","packagerLogsStream","projectRoot","onStartBuildBundle","total","clear","complete","incomplete","setBundleProgressBar","onProgressBuildBundle","ticks","percent","curr","tick","onFinishBuildBundle","err","startTime","endTime","updateLogs","newLogChunks","updater","forEach","newLogChunk","attachLoggerStream","stream","write","tag","type","start","validateLowLatencyAsync","status","FATAL","Error","stop","runAsync","setSegmentNodeKey","setVersionName","version","_registerLogs","SERVER_URL","serverUrl","startsWith","parsedUrl","parse","api","host","hostname","port","developerTool","name","sync","__dirname","commandModule","file","default","EXPO_DEBUG","commands","push","command","alias","includes","console","log","help","e","code","START_LOADING","STOP_LOADING","DOWNLOAD_CLI_PROGRESS","ERROR","notifications","addStream","global","all","catch"],"mappings":"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","file":"../exp.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport ProgressBar from 'progress';\nimport _ from 'lodash-node';\nimport bunyan from 'bunyan';\nimport crayon from '@ccheever/crayon';\nimport glob from 'glob';\nimport path from 'path';\nimport simpleSpinner from '@exponent/simple-spinner';\nimport url from 'url';\n\nimport program, { Command } from 'commander';\nimport {\n  Analytics,\n  Binaries,\n  Config,\n  Doctor,\n  Logger,\n  PackagerLogsStream,\n  NotificationCode,\n  ProjectUtils,\n  User as UserManager,\n} from 'xdl';\n\nimport { loginOrRegisterIfLoggedOut } from './accounts';\nimport log from './log';\nimport update from './update';\nimport urlOpts from './urlOpts';\n\nif (process.env.NODE_ENV === 'development') {\n  require('source-map-support').install();\n}\n\nCommand.prototype.urlOpts = function() {\n  urlOpts.addOptions(this);\n  return this;\n};\n\nCommand.prototype.allowOffline = function() {\n  this.option('--offline', 'Allows this command to run while offline');\n  return this;\n};\n\nCommand.prototype.allowNonInteractive = function() {\n  this.option(\n    '--non-interactive',\n    'Fails if an interactive prompt would be required to continue.'\n  );\n  return this;\n};\n\nCommand.prototype.asyncAction = function(asyncFn, skipUpdateCheck) {\n  return this.action(async (...args) => {\n    if (!skipUpdateCheck) {\n      try {\n        await checkForUpdateAsync();\n      } catch (e) {}\n    }\n\n    try {\n      let options = _.last(args);\n      if (options.output === 'raw') {\n        log.config.raw = true;\n      }\n      if (options.offline) {\n        Config.offline = true;\n      }\n      await asyncFn(...args);\n    } catch (err) {\n      if (err._isCommandError) {\n        log.error(err.message);\n      } else if (err._isApiError) {\n        log.error(crayon.red(err.message));\n      } else if (err.isXDLError) {\n        log.error(err.message);\n      } else {\n        log.error(err.message);\n        crayon.gray.error(err.stack);\n      }\n      process.exit(1);\n    }\n  });\n};\n\nCommand.prototype.asyncActionProjectDir = function(\n  asyncFn,\n  skipProjectValidation,\n  skipAuthCheck\n) {\n  return this.asyncAction(async (projectDir, ...args) => {\n    try {\n      await checkForUpdateAsync();\n    } catch (e) {}\n\n    const opts = args[0];\n    if (!skipAuthCheck && !opts.nonInteractive && !opts.offline) {\n      await loginOrRegisterIfLoggedOut();\n    }\n\n    if (!skipAuthCheck) {\n      await UserManager.ensureLoggedInAsync();\n    }\n\n    if (!projectDir) {\n      projectDir = process.cwd();\n    } else {\n      projectDir = path.resolve(process.cwd(), projectDir);\n    }\n\n    const logLines = (msg, logFn) => {\n      for (let line of msg.split('\\n')) {\n        logFn(line);\n      }\n    };\n\n    const logWithLevel = chunk => {\n      if (!chunk.msg) {\n        return;\n      }\n      if (chunk.level <= bunyan.INFO) {\n        logLines(chunk.msg, log);\n      } else if (chunk.level === bunyan.WARN) {\n        logLines(chunk.msg, log.warn);\n      } else {\n        logLines(chunk.msg, log.error);\n      }\n    };\n\n    let bar;\n    let packagerLogsStream = new PackagerLogsStream({\n      projectRoot: projectDir,\n      onStartBuildBundle: () => {\n        bar = new ProgressBar('Building JavaScript bundle [:bar] :percent', {\n          total: 100,\n          clear: true,\n          complete: '=',\n          incomplete: ' ',\n        });\n\n        log.setBundleProgressBar(bar);\n      },\n      onProgressBuildBundle: percent => {\n        if (!bar || bar.complete) return;\n        let ticks = percent - bar.curr;\n        ticks > 0 && bar.tick(ticks);\n      },\n      onFinishBuildBundle: (err, startTime: Date, endTime: Date) => {\n        if (bar && !bar.complete) {\n          bar.tick(100 - bar.curr);\n        }\n\n        if (bar) {\n          log.setBundleProgressBar(null);\n          bar = null;\n\n          if (err) {\n            log(crayon.red('Failed building JavaScript bundle.'));\n          } else {\n            log(\n              crayon.green(\n                `Finished building JavaScript bundle in ${endTime - startTime}ms.`\n              )\n            );\n          }\n        }\n      },\n      updateLogs: updater => {\n        let newLogChunks = updater([]);\n        newLogChunks.forEach(newLogChunk => {\n          logWithLevel(newLogChunk);\n        });\n      },\n    });\n\n    // needed for validation logging to function\n    ProjectUtils.attachLoggerStream(projectDir, {\n      stream: {\n        write: chunk => {\n          if (chunk.tag === 'device') {\n            logWithLevel(chunk);\n          }\n        },\n      },\n      type: 'raw',\n    });\n\n    // the existing CLI modules only pass one argument to this function, so skipProjectValidation\n    // will be undefined in most cases. we can explicitly pass a truthy value here to avoid validation (eg for init)\n    if (!skipProjectValidation) {\n      log('Making sure project is set up correctly...');\n      simpleSpinner.start();\n      // validate that this is a good projectDir before we try anything else\n      let status = await Doctor.validateLowLatencyAsync(projectDir);\n      if (status === Doctor.FATAL) {\n        throw new Error(\n          `Invalid project directory. See above logs for information.`\n        );\n      }\n      simpleSpinner.stop();\n      log('Your project looks good!');\n    }\n\n    return asyncFn(projectDir, ...args);\n  }, true);\n};\n\nfunction runAsync() {\n  try {\n    Analytics.setSegmentNodeKey('vGu92cdmVaggGA26s3lBX6Y5fILm8SQ7');\n    Analytics.setVersionName(require('../package.json').version);\n    _registerLogs();\n\n    if (process.env.SERVER_URL) {\n      let serverUrl = process.env.SERVER_URL;\n      if (!serverUrl.startsWith('http')) {\n        serverUrl = `http://${serverUrl}`;\n      }\n      let parsedUrl = url.parse(serverUrl);\n      Config.api.host = parsedUrl.hostname;\n      Config.api.port = parsedUrl.port;\n    }\n\n    Config.developerTool = 'exp';\n\n    program.name = 'exp';\n    program\n      .version(require('../package.json').version)\n      .option('-o, --output [format]', 'Output format. pretty (default), raw');\n    glob\n      .sync('commands/*.js', {\n        cwd: __dirname,\n      })\n      .forEach(file => {\n        const commandModule = require(`./${file}`);\n        if (typeof commandModule === 'function') {\n          commandModule(program);\n        } else if (typeof commandModule.default === 'function') {\n          commandModule.default(program);\n        } else {\n          log.error(`'${file}.js' is not a properly formatted command.`);\n        }\n      });\n\n    if (process.env.EXPO_DEBUG) {\n      glob\n        .sync('debug_commands/*.js', {\n          cwd: __dirname,\n        })\n        .forEach(file => {\n          require(`./${file}`)(program);\n        });\n    }\n\n    program.parse(process.argv);\n\n    let subCommand = process.argv[2];\n    if (subCommand) {\n      let commands = [];\n      program.commands.forEach(command => {\n        commands.push(command['_name']);\n        let alias = command['_alias'];\n        if (alias) {\n          commands.push(alias);\n        }\n      });\n      if (!_.includes(commands, subCommand)) {\n        console.log(\n          `\"${subCommand}\" is not an exp command. See \"exp --help\" for the full list of commands.`\n        );\n      }\n    } else {\n      program.help();\n    }\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n}\n\nasync function checkForUpdateAsync() {\n  let { state, current, latest } = await update.checkForExpUpdateAsync();\n  let message;\n  switch (state) {\n    case 'up-to-date':\n      break;\n\n    case 'out-of-date':\n      message = `There is a new version of exp available (${latest}).\nYou are currently using exp ${current}\nRun \\`npm install -g exp\\` to get the latest version`;\n      crayon.green.error(message);\n      break;\n\n    case 'ahead-of-published':\n      // if the user is ahead of npm, we're going to assume they know what they're doing\n      break;\n\n    default:\n      log.error('Confused about what version of exp you have?');\n  }\n}\n\nfunction _registerLogs() {\n  let stream = {\n    stream: {\n      write: chunk => {\n        if (chunk.code) {\n          switch (chunk.code) {\n            case NotificationCode.START_LOADING:\n              simpleSpinner.start();\n              return;\n            case NotificationCode.STOP_LOADING:\n              simpleSpinner.stop();\n              return;\n            case NotificationCode.DOWNLOAD_CLI_PROGRESS:\n              return;\n          }\n        }\n\n        if (chunk.level === bunyan.INFO) {\n          log(chunk.msg);\n        } else if (chunk.level === bunyan.WARN) {\n          log.warn(chunk.msg);\n        } else if (chunk.level >= bunyan.ERROR) {\n          log.error(chunk.msg);\n        }\n      },\n    },\n    type: 'raw',\n  };\n\n  Logger.notifications.addStream(stream);\n  Logger.global.addStream(stream);\n}\n\nasync function writePathAsync() {\n  let subCommand = process.argv[2];\n  if (subCommand === 'prepare-detached-build') {\n    // This is being run from Android Studio or Xcode. Don't want to write PATH in this case.\n    return;\n  }\n\n  await Binaries.writePathToUserSettingsAsync();\n}\n\nexport function run() {\n  (async function() {\n    await Promise.all([writePathAsync(), runAsync()]);\n  })().catch(e => {\n    console.error('Uncaught Error', e);\n    process.exit(1);\n  });\n}\n"],"sourceRoot":"/Users/jesseruder/exponent/universe/dev/exp/src"}