{"version":3,"sources":["commands/init.js"],"names":["projectDir","options","templateType","questions","insertPath","dirname","name","basename","Error","projectType","versionsAsync","versions","templateIds","map","templates","template","id","push","type","message","join","validate","val","i","length","promptAsync","answers","downloadAndExtractTemplate","action","validatedOptions","_retryObject","requestID","_currentRequestID","downloadTemplateApp","progressFunction","percent","Math","round","progress","notifications","info","code","DOWNLOAD_CLI_PROGRESS","bar","total","complete","incomplete","_downloadIsSlowPrompt","tick","retryFunction","triggerRetryPrompt","templateDownload","extractTemplateApp","starterAppPath","root","process","exit","DOWNLOAD_IS_SLOW","answer","retry","clearXDLCacheAsync","program","command","alias","description","option","allowNonInteractive","asyncActionProjectDir"],"mappings":"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","file":"../../commands/init.js","sourcesContent":["import inquirerAsync from 'inquirer-async';\nimport ProgressBar from 'progress';\nimport { Api, Exp, Logger, NotificationCode, MessageCode } from 'xdl';\n\nimport _ from 'lodash';\nimport log from '../log';\n\nimport path from 'path';\n\nlet _currentRequestID = 0;\nlet _downloadIsSlowPrompt = false;\nlet _retryObject = {};\n\nasync function action(projectDir, options) {\n  let templateType;\n  let questions = [];\n  let insertPath = path.dirname(projectDir);\n  let name = path.basename(projectDir);\n\n  if (!insertPath || !name) {\n    throw new Error(`Couldn't determine path for new project.`);\n  }\n\n  if (options.projectType) {\n    templateType = options.projectType;\n  } else {\n    let versions = await Api.versionsAsync();\n    let templateIds = _.map(versions.templates, template => `\"${template.id}\"`);\n\n    questions.push({\n      type: 'input',\n      name: 'type',\n      message: `Project type. Options are: ${templateIds.join(', ')}`,\n      validate(val) {\n        for (let i = 0; i < versions.templates.length; i++) {\n          if (versions.templates[i].id === val) {\n            return true;\n          }\n        }\n        return false;\n      },\n    });\n  }\n\n  if (questions.length > 0) {\n    var answers = await inquirerAsync.promptAsync(questions);\n    if (answers.type) {\n      templateType = answers.type;\n    }\n  }\n\n  // TODO(jim): We will need to update this method later to not force\n  // us to strip out the <name> from /path/to/<name> if we don't want\n  // to duplicate the folder at creation time. (example: test => test/test)\n  downloadAndExtractTemplate(templateType, insertPath, {\n    name,\n  });\n}\n\nasync function downloadAndExtractTemplate(\n  templateType,\n  projectDir,\n  validatedOptions\n) {\n  _retryObject = { templateType, projectDir, validatedOptions };\n  const requestID = _currentRequestID + 1;\n  _currentRequestID = requestID;\n  let templateDownload = await Exp.downloadTemplateApp(\n    templateType,\n    projectDir,\n    {\n      ...validatedOptions,\n      progressFunction: progress => {\n        const percent = Math.round(progress * 100);\n        if (_currentRequestID === requestID) {\n          Logger.notifications.info(\n            { code: NotificationCode.DOWNLOAD_CLI_PROGRESS },\n            percent + '%'\n          );\n          const bar = new ProgressBar('[:bar] :percent', {\n            total: 100,\n            complete: '=',\n            incomplete: ' ',\n          });\n          if (!_downloadIsSlowPrompt) {\n            bar.tick(percent);\n          }\n        }\n      },\n      retryFunction: () => {\n        triggerRetryPrompt();\n      },\n    }\n  );\n\n  // Since we cannot cancel the download request, we need a way to ignore all of the requests made except the last one when retrying.\n  if (_currentRequestID !== requestID) {\n    return;\n  }\n  let root = await Exp.extractTemplateApp(\n    templateDownload.starterAppPath,\n    templateDownload.name,\n    templateDownload.root\n  );\n  log(\n    `Your project is ready at ${root}. Use \"exp start ${root}\" to get started.`\n  );\n  process.exit();\n}\n\nasync function triggerRetryPrompt() {\n  _downloadIsSlowPrompt = true;\n  var answer = await inquirerAsync.promptAsync({\n    type: 'input',\n    name: 'retry',\n    message: '\\n' + MessageCode.DOWNLOAD_IS_SLOW + '(y/n)',\n    validate(val) {\n      if (val !== 'y' && val !== 'n') {\n        return false;\n      }\n      return true;\n    },\n  });\n\n  if (answer.retry === 'n') {\n    _downloadIsSlowPrompt = false;\n  } else {\n    Exp.clearXDLCacheAsync();\n    _downloadIsSlowPrompt = false;\n    downloadAndExtractTemplate(\n      _retryObject.templateType,\n      _retryObject.projectDir,\n      _retryObject.validatedOptions\n    );\n  }\n}\n\nexport default program => {\n  program\n    .command('init [project-dir]')\n    .alias('i')\n    .description(\n      'Initializes a directory with an example project. Run it without any options and you will be prompted for the name and type.'\n    )\n    .option(\n      '-t, --projectType [type]',\n      'Specify what type of template to use. Run without this option to see all choices.'\n    )\n    .allowNonInteractive()\n    .asyncActionProjectDir(action, true /* skipProjectValidation */);\n};\n"],"sourceRoot":"/Users/jesseruder/exponent/universe/dev/exp/src"}