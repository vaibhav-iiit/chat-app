{"version":3,"sources":["commands/build/BaseBuilder.js"],"names":["BaseBuilder","projectDir","options","wait","clearCredentials","_checkProjectConfig","run","error","message","process","exit","readConfigJsonAsync","exp","isDetached","current","buildAsync","mode","buildStatus","err","Error","jobs","length","raw","forEach","platform","j","status","artifacts","url","expIds","ids","opts","buildResp","ipaUrl","apkUrl","buildErr"],"mappings":"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","file":"../../../commands/build/BaseBuilder.js","sourcesContent":["/**\n * @flow\n */\n\nimport { Project, ProjectUtils } from 'xdl';\n\nimport log from '../../log';\nimport { action as publishAction } from '../publish';\n\nimport BuildError from './BuildError';\n\ntype BuilderOptions = {\n  wait: boolean,\n  clearCredentials: boolean,\n};\n\nexport default class BaseBuilder {\n  projectDir: string = '';\n  options: BuilderOptions = {\n    wait: false,\n    clearCredentials: false,\n  };\n  run: () => Promise<void>;\n\n  constructor(projectDir: string, options: BuilderOptions) {\n    this.projectDir = projectDir;\n    this.options = options;\n  }\n\n  async command() {\n    try {\n      await this._checkProjectConfig();\n      await this.run();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async _checkProjectConfig(): Promise<void> {\n    let { exp } = await ProjectUtils.readConfigJsonAsync(this.projectDir);\n    if (exp.isDetached) {\n      log.error(`\\`exp build\\` is not supported for detached projects.`);\n      process.exit(1);\n      return;\n    }\n  }\n\n  async checkStatus(current: boolean = true): Promise<void> {\n    await this._checkProjectConfig();\n\n    log('Checking if current build exists...\\n');\n\n    const buildStatus = await Project.buildAsync(this.projectDir, {\n      mode: 'status',\n      current,\n    });\n\n    if (buildStatus.err) {\n      throw new Error('Error getting current build status for this project.');\n    }\n\n    if (buildStatus.jobs && buildStatus.jobs.length) {\n      log.raw();\n      log('============');\n      log('Build Status');\n      log('============\\n');\n      buildStatus.jobs.forEach(j => {\n        let platform;\n        if (j.platform === 'ios') {\n          platform = 'iOS';\n        } else {\n          platform = 'Android';\n        }\n\n        let status;\n        switch (j.status) {\n          case 'pending':\n            status = 'Build waiting in queue...';\n            break;\n          case 'started':\n            status = 'Build started...';\n            break;\n          case 'in-progress':\n            status = 'Build in progress...';\n            break;\n          case 'finished':\n            status = 'Build finished.';\n            break;\n          case 'errored':\n            status = 'There was an error with this build. Please try again.';\n            break;\n          default:\n            status = '';\n            break;\n        }\n\n        if (j.status !== 'finished') {\n          log(`${platform}: ${status}`);\n        } else {\n          log(`${platform}:`);\n          switch (j.platform) {\n            case 'ios':\n              if (!j.artifacts) {\n                log(`Problem getting IPA URL. Please try build again.`);\n                break;\n              }\n              log(`IPA: ${j.artifacts.url}\\n`);\n              break;\n            case 'android':\n              if (!j.artifacts) {\n                log(`Problem getting APK URL. Please try build again.`);\n                break;\n              }\n              log(`APK: ${j.artifacts.url}\\n`);\n              break;\n          }\n        }\n      });\n\n      throw new BuildError(\n        'Cannot start new build, as there is a build in progress.'\n      );\n    }\n\n    log('No currently active or previous builds for this project.');\n  }\n\n  async publish() {\n    // Begin publish\n    log('Starting build process...');\n\n    //run publish -- in future, we should determine whether we NEED to do this\n    const { ids: expIds, url, err } = await publishAction(this.projectDir);\n\n    if (err) {\n      throw new BuildError(\n        `No url was returned from publish. Please try again.\\n${err}`\n      );\n    } else if (!url || url === '') {\n      throw new BuildError(\n        'No url was returned from publish. Please try again.'\n      );\n    }\n\n    return expIds;\n  }\n\n  async build(expIds: Array<string>, platform: string) {\n    log('Building...');\n\n    let opts = {\n      mode: 'create',\n      expIds,\n      platform,\n    };\n\n    // call out to build api here with url\n    const buildResp = await Project.buildAsync(this.projectDir, opts);\n\n    if (this.options.wait) {\n      const { ipaUrl, apkUrl, buildErr } = buildResp;\n      // do some stuff here\n      if (buildErr) {\n        throw new BuildError(`Build failed with error.\\n${buildErr}`);\n      } else if (!ipaUrl || ipaUrl === '' || !apkUrl || apkUrl === '') {\n        throw new BuildError(\n          'No url was returned from the build process. Please try again.'\n        );\n      }\n\n      log(`IPA Url: ${ipaUrl}`);\n      log(`APK Url: ${apkUrl}`);\n\n      log('Successfully built standalone app!');\n    } else {\n      log(\n        'Build successfully started, it may take a few minutes to complete. Run \"exp build:status\" to monitor it.'\n      );\n    }\n  }\n}\n"],"sourceRoot":"/Users/jesseruder/exponent/universe/dev/exp/src"}