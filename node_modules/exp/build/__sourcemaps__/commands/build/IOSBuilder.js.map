{"version":3,"sources":["commands/build/IOSBuilder.js"],"names":["IOSBuilder","getPublishInfoAsync","projectDir","args","username","experienceName","remoteFullPackageName","bundleIdentifier","bundleIdentifierIOS","INVALID_OPTIONS","checkStatus","collectAndValidateCredentials","error","publish","publishedExpIds","build","credentialMetadata","platform","credentialsExistForPlatformAsync","existingCredentials","hasAppleId","hasCert","hasPushCert","options","clearCredentials","appleId","certP12","pushP12","askForAppleId","validateCredentialsForPlatform","askForCerts","ensureAppId","CREDENTIAL_ERROR","askForPushCerts","console","log","questions","type","name","message","validate","val","prompt","answers","credentials","password","teamId","updateCredentialsForPlatform","choices","value","p12Path","stat","promise","stats","isFile","filter","isAbsolute","resolve","when","manageCertificates","fetchAppleCertificates","readFile","pathToP12","p12Data","toString","certPassword","managePushCertificates","fetchPushCertificates","pushPassword"],"mappings":"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","file":"../../../commands/build/IOSBuilder.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport inquirer from 'inquirer';\nimport untildify from 'untildify';\nimport { Exp, Credentials, XDLError, ErrorCode } from 'xdl';\n\nimport type { IOSCredentials, CredentialMetadata } from 'XDLCredentials';\nimport BaseBuilder from './BaseBuilder';\nimport log from '../../log';\n\n/**\n * Steps:\n * 1) Check for active builds -- only one build per user/experience can happen at once\n * 2) Check for Apple ID credentials for this user/experience\n * \t\ta) If they don't exist, prompt user to enter them. Submit them to server (/-/api/credentials/add),\n * \t\t\t which will verify and store them.\n * 3) Check for valid cert for this user/experience\n * \t\ta) If valid cert doesn't exist, prompt user:\n * \t \t\t\ti) Do you have a certificate you'd like to use for signing this application, or would you like us\n * \t \t\t\t\t to generate them for you?\n * \t \t\t\t\t This is most common when you have other apps in the App Store, you're replacing an existing\n * \t \t\t\t\t app in the App Store with an Exponent app, or you'd simply like more control over your Apple\n * \t \t\t\t\t Developer account.\n * \t \t    ii) If they choose to upload a cert, ask them for the path to .p12 file. Upload the p12 (/-/api/credentials/add).\n * \t \t    iii) If they want us to manage it, call to /-/api/credentials/generate-certs, and verify that we were able to generate the cert\n * \t \tb) If a cert exists, the server will verify that it is still valid.\n * 4) Publish the experience from the local packager.\n * 5) Initiate build process.\n */\nexport default class IOSBuilder extends BaseBuilder {\n  async run() {\n    // validate bundleIdentifier before hitting the network to check build status\n    const {\n      args: {\n        username,\n        remoteFullPackageName: experienceName,\n        bundleIdentifierIOS: bundleIdentifier,\n      },\n    } = await Exp.getPublishInfoAsync(this.projectDir);\n\n    if (!bundleIdentifier) {\n      throw new XDLError(\n        ErrorCode.INVALID_OPTIONS,\n        `Your project must have a bundleIdentifier set in exp.json. See https://docs.expo.io/versions/latest/guides/building-standalone-apps.html`\n      );\n    }\n\n    // Check the status of any current builds\n    await this.checkStatus();\n    // Check for existing credentials, collect any missing credentials, and validate them\n    try {\n      await this.collectAndValidateCredentials(\n        username,\n        experienceName,\n        bundleIdentifier\n      );\n    } catch (e) {\n      log.error(\n        'Error validating credentials. You may need to clear them (with `-c`) and try again.'\n      );\n      throw e;\n    }\n    // Publish the experience\n    const publishedExpIds = await this.publish();\n    // Initiate the build with the published experience\n    await this.build(publishedExpIds, 'ios');\n  }\n\n  async collectAndValidateCredentials(\n    username: string,\n    experienceName: string,\n    bundleIdentifier: string\n  ) {\n    const credentialMetadata = {\n      username,\n      experienceName,\n      bundleIdentifier,\n      platform: 'ios',\n    };\n\n    log('Checking for existing Apple credentials...');\n    const existingCredentials: ?IOSCredentials = await Credentials.credentialsExistForPlatformAsync(\n      credentialMetadata\n    );\n\n    let hasAppleId, hasCert, hasPushCert;\n    if (this.options.clearCredentials || !existingCredentials) {\n      hasAppleId = false;\n      hasCert = false;\n      hasPushCert = false;\n    } else if (existingCredentials) {\n      hasAppleId = !!existingCredentials.appleId;\n      hasCert = !!existingCredentials.certP12;\n      hasPushCert = !!existingCredentials.pushP12;\n    }\n\n    if (!hasAppleId) {\n      await this.askForAppleId(credentialMetadata);\n    } else {\n      log('Validating Apple credentials...');\n      await Credentials.validateCredentialsForPlatform(\n        'ios',\n        'appleId',\n        null,\n        credentialMetadata\n      );\n    }\n    log('Credentials valid.');\n\n    if (!hasCert) {\n      await this.askForCerts(credentialMetadata);\n    } else {\n      log('Validating distribution certificate...');\n      await Credentials.validateCredentialsForPlatform(\n        'ios',\n        'cert',\n        null,\n        credentialMetadata\n      );\n    }\n\n    // ensure that the app id exists or is created\n    try {\n      log('Validating app id...');\n      await Credentials.ensureAppId(credentialMetadata);\n    } catch (e) {\n      throw new XDLError(\n        ErrorCode.CREDENTIAL_ERROR,\n        `It seems like we can't create an app on the Apple developer center with this app id: ${bundleIdentifier}. Please change your bundle identifier to something else.`\n      );\n    }\n\n    if (!hasPushCert) {\n      await this.askForPushCerts(credentialMetadata);\n    } else {\n      log('Validating push certificate...');\n      await Credentials.validateCredentialsForPlatform(\n        'ios',\n        'push',\n        null,\n        credentialMetadata\n      );\n    }\n  }\n\n  async askForAppleId(credentialMetadata: CredentialMetadata) {\n    // ask for creds\n    console.log('');\n    console.log(\n      'We need your Apple ID/password to manage certificates and provisioning profiles from your Apple Developer account.'\n    );\n    const questions = [\n      {\n        type: 'input',\n        name: 'appleId',\n        message: `What's your Apple ID?`,\n        validate: val => val !== '',\n      },\n      {\n        type: 'password',\n        name: 'password',\n        message: `Password?`,\n        validate: val => val !== '',\n      },\n      {\n        type: 'input',\n        name: 'teamId',\n        message: `What is your Apple Team ID (you can find that on this page: https://developer.apple.com/account/#/membership)?`,\n        validate: val => val !== '',\n      },\n    ];\n\n    const answers = await inquirer.prompt(questions);\n\n    const credentials: IOSCredentials = {\n      appleId: answers.appleId,\n      password: answers.password,\n      teamId: answers.teamId,\n    };\n\n    log('Validating Apple credentials...');\n    await Credentials.validateCredentialsForPlatform(\n      'ios',\n      'appleId',\n      credentials,\n      credentialMetadata\n    );\n    await Credentials.updateCredentialsForPlatform(\n      'ios',\n      credentials,\n      credentialMetadata\n    );\n  }\n\n  async askForCerts(credentialMetadata: CredentialMetadata) {\n    // ask about certs\n    console.log(``);\n\n    const questions = [\n      {\n        type: 'rawlist',\n        name: 'manageCertificates',\n        message: `Do you already have a distribution certificate you'd like us to use,\\nor do you want us to manage your certificates for you?`,\n        choices: [\n          { name: 'Let Exponent handle the process!', value: true },\n          { name: 'I want to upload my own certificate!', value: false },\n        ],\n      },\n      {\n        type: 'input',\n        name: 'pathToP12',\n        message: 'Path to P12 file:',\n        validate: async p12Path => {\n          try {\n            const stats = await fs.stat.promise(p12Path);\n            return stats.isFile();\n          } catch (e) {\n            // file does not exist\n            console.log('\\nFile does not exist.');\n            return false;\n          }\n        },\n        filter: p12Path => {\n          p12Path = untildify(p12Path);\n          if (!path.isAbsolute(p12Path)) {\n            p12Path = path.resolve(p12Path);\n          }\n          return p12Path;\n        },\n        when: answers => !answers.manageCertificates,\n      },\n      {\n        type: 'password',\n        name: 'certPassword',\n        message: 'Certificate P12 password (empty is OK):',\n        when: answers => !answers.manageCertificates,\n      },\n    ];\n\n    const answers = await inquirer.prompt(questions);\n\n    if (answers.manageCertificates) {\n      // Attempt to fetch new certificates\n      log('Generating distribution certificate...');\n      await Credentials.fetchAppleCertificates(credentialMetadata);\n    } else {\n      // Upload credentials\n      const p12Data = await fs.readFile.promise(answers.pathToP12);\n\n      const credentials: IOSCredentials = {\n        certP12: p12Data.toString('base64'),\n        certPassword: answers.certPassword,\n      };\n\n      log('Validating distribution certificate...');\n      await Credentials.validateCredentialsForPlatform(\n        'ios',\n        'cert',\n        credentials,\n        credentialMetadata\n      );\n      await Credentials.updateCredentialsForPlatform(\n        'ios',\n        credentials,\n        credentialMetadata\n      );\n    }\n    log('Distribution certificate setup complete.');\n  }\n\n  async askForPushCerts(credentialMetadata: CredentialMetadata) {\n    // ask about certs\n\n    const questions = [\n      {\n        type: 'rawlist',\n        name: 'managePushCertificates',\n        message: `Do you already have a push notification certificate you'd like us to use,\\nor do you want us to manage your push certificates for you?`,\n        choices: [\n          { name: 'Let Exponent handle the process!', value: true },\n          { name: 'I want to upload my own certificate!', value: false },\n        ],\n      },\n      {\n        type: 'input',\n        name: 'pathToP12',\n        message: 'Path to P12 file:',\n        validate: async p12Path => {\n          try {\n            const stats = await fs.stat.promise(p12Path);\n            return stats.isFile();\n          } catch (e) {\n            // file does not exist\n            console.log('\\nFile does not exist.');\n            return false;\n          }\n        },\n        filter: p12Path => {\n          p12Path = untildify(p12Path);\n          if (!path.isAbsolute(p12Path)) {\n            p12Path = path.resolve(p12Path);\n          }\n          return p12Path;\n        },\n        when: answers => !answers.managePushCertificates,\n      },\n      {\n        type: 'password',\n        name: 'pushPassword',\n        message: 'Push certificate P12 password (empty is OK):',\n        when: answers => !answers.managePushCertificates,\n      },\n    ];\n\n    const answers: {\n      managePushCertificates: boolean,\n      pathToP12?: string,\n      pushPassword?: string,\n    } = await inquirer.prompt(questions);\n\n    if (answers.managePushCertificates) {\n      // Attempt to fetch new certificates\n      log('Fetching a new push certificate...');\n      await Credentials.fetchPushCertificates(credentialMetadata);\n    } else {\n      // Upload credentials\n      const p12Data = await fs.readFile.promise(answers.pathToP12);\n\n      const credentials: IOSCredentials = {\n        pushP12: p12Data.toString('base64'),\n        pushPassword: answers.pushPassword,\n      };\n\n      log('Validating push certificate...');\n      await Credentials.validateCredentialsForPlatform(\n        'ios',\n        'push',\n        credentials,\n        credentialMetadata\n      );\n      await Credentials.updateCredentialsForPlatform(\n        'ios',\n        credentials,\n        credentialMetadata\n      );\n    }\n    log('Push certificate setup complete.');\n  }\n}\n"],"sourceRoot":"/Users/jesseruder/exponent/universe/dev/exp/src"}