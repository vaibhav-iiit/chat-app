{"version":3,"sources":["commands/build/AndroidBuilder.js"],"names":["AndroidBuilder","checkStatus","collectAndValidateCredentials","publish","publishedExpIds","build","getPublishInfoAsync","projectDir","args","username","experienceName","remoteFullPackageName","credentialMetadata","platform","credentialsExistForPlatformAsync","credentials","options","clearCredentials","console","log","questions","type","name","message","choices","value","validate","keystorePath","stat","promise","keystorePathStats","isFile","filter","isAbsolute","resolve","when","answers","uploadKeystore","val","password","prompt","removeCredentialsForPlatform","keystoreAlias","keystorePassword","keyPassword","readFile","keystoreData","keystore","toString","updateCredentialsForPlatform"],"mappings":"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","file":"../../../commands/build/AndroidBuilder.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport inquirer from 'inquirer';\nimport untildify from 'untildify';\nimport { Exp, Credentials } from 'xdl';\n\nimport BaseBuilder from './BaseBuilder';\n\nimport type { AndroidCredentials } from 'xdl/build/credentials';\n\nexport default class AndroidBuilder extends BaseBuilder {\n  async run() {\n    // Check the status of any current builds\n    await this.checkStatus();\n    // Check for existing credentials, collect any missing credentials, and validate them\n    await this.collectAndValidateCredentials();\n    // Publish the current experience\n    const publishedExpIds = await this.publish();\n    // Initiate a build\n    await this.build(publishedExpIds, 'android');\n  }\n\n  async collectAndValidateCredentials() {\n    const {\n      args: { username, remoteFullPackageName: experienceName },\n    } = await Exp.getPublishInfoAsync(this.projectDir);\n\n    const credentialMetadata = {\n      username,\n      experienceName,\n      platform: 'android',\n    };\n\n    const credentials: ?AndroidCredentials = await Credentials.credentialsExistForPlatformAsync(\n      credentialMetadata\n    );\n\n    if (this.options.clearCredentials || !credentials) {\n      console.log('');\n      const questions = [\n        {\n          type: 'rawlist',\n          name: 'uploadKeystore',\n          message: `Would you like to upload a keystore or have us generate one for you?\\nIf you don't know what this means, let us handle it! :)\\n`,\n          choices: [\n            { name: 'Let Exponent handle the process!', value: false },\n            { name: 'I want to upload my own keystore!', value: true },\n          ],\n        },\n        {\n          type: 'input',\n          name: 'keystorePath',\n          message: `Path to keystore:`,\n          validate: async keystorePath => {\n            try {\n              const keystorePathStats = await fs.stat.promise(keystorePath);\n              return keystorePathStats.isFile();\n            } catch (e) {\n              // file does not exist\n              console.log('\\nFile does not exist.');\n              return false;\n            }\n          },\n          filter: keystorePath => {\n            keystorePath = untildify(keystorePath);\n            if (!path.isAbsolute(keystorePath)) {\n              keystorePath = path.resolve(keystorePath);\n            }\n            return keystorePath;\n          },\n          when: answers => answers.uploadKeystore,\n        },\n        {\n          type: 'input',\n          name: 'keystoreAlias',\n          message: `Keystore Alias:`,\n          validate: val => val !== '',\n          when: answers => answers.uploadKeystore,\n        },\n        {\n          type: 'password',\n          name: 'keystorePassword',\n          message: `Keystore Password:`,\n          validate: val => val !== '',\n          when: answers => answers.uploadKeystore,\n        },\n        {\n          type: 'password',\n          name: 'keyPassword',\n          message: `Key Password:`,\n          validate: (password, answers) => {\n            if (password === '') {\n              return false;\n            }\n            // Todo validate keystore passwords\n            return true;\n          },\n          when: answers => answers.uploadKeystore,\n        },\n      ];\n\n      const answers = await inquirer.prompt(questions);\n\n      if (!answers.uploadKeystore) {\n        if (this.options.clearCredentials) {\n          await Credentials.removeCredentialsForPlatform(\n            'android',\n            credentialMetadata\n          );\n        }\n        return; // just continue\n      } else {\n        const {\n          keystorePath,\n          keystoreAlias,\n          keystorePassword,\n          keyPassword,\n        } = answers;\n\n        // read the keystore\n        const keystoreData = await fs.readFile.promise(keystorePath);\n\n        const credentials: AndroidCredentials = {\n          keystore: keystoreData.toString('base64'),\n          keystoreAlias,\n          keystorePassword,\n          keyPassword,\n        };\n        await Credentials.updateCredentialsForPlatform(\n          'android',\n          credentials,\n          credentialMetadata\n        );\n      }\n    }\n  }\n}\n"],"sourceRoot":"/Users/jesseruder/exponent/universe/dev/exp/src"}