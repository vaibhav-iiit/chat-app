{"version":3,"sources":["commands/whoami.js"],"names":["options","ensureLoggedInAsync","user","username","raw","Error","action","program","command","alias","description","asyncAction"],"mappings":";;;;;;;;;;;;;;;;;;;8HAQA,iBAAsBA,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqB,2BAAKC,mBAAL,EADrB;;AAAA;AACQC,gBADR;;AAAA,kBAEMA,QAAQA,KAAKC,QAFnB;AAAA;AAAA;AAAA;;AAGI,iEAAoBD,KAAKC,QAAzB;AACA,0CAAIC,GAAJ,CAAQF,KAAKC,QAAb;AAJJ,6CAKWD,IALX;;AAAA;AAAA,kBAOU,IAAIG,KAAJ,CAAU,iDAAV,CAPV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,M;;;;;;;AAJf;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;kBAae,mBAAW;AACxBC,UACGC,OADH,CACW,QADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAII,+DAJJ,EAMGC,WANH,CAMeL,MANf;AAOD,C","file":"../../commands/whoami.js","sourcesContent":["/**\n * @flow\n */\n\nimport { User } from 'xdl';\n\nimport log from '../log';\n\nasync function action(options) {\n  const user = await User.ensureLoggedInAsync();\n  if (user && user.username) {\n    log(`Logged in as ${user.username}`);\n    log.raw(user.username);\n    return user;\n  } else {\n    throw new Error(\"Unexpected Error: Couldn't get user information\");\n  }\n}\n\nexport default program => {\n  program\n    .command('whoami')\n    .alias('w')\n    .description(\n      'Checks with the server and then says who you are logged in as'\n    )\n    .asyncAction(action);\n};\n"],"sourceRoot":"/Users/jesseruder/exponent/universe/dev/exp/src"}