{"version":3,"sources":["urlOpts.js"],"names":["projectDir","options","readAsync","opts","host","lan","localhost","tunnel","protocol","exp","http","redirect","hostType","rawArgs","parent","hasBooleanArg","dev","getBooleanArg","strict","minify","urlType","setAsync","optsAsync","android","openProjectAsync","ios","handleMobileOptsAsync","addOptions","program","option","argName","includes","printQRCode","url","generate","console","log","code"],"mappings":"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","file":"../urlOpts.js","sourcesContent":["import indentString from 'indent-string';\nimport _ from 'lodash-node';\nimport qrcodeTerminal from 'qrcode-terminal';\n\nimport { Android, ProjectSettings, Simulator } from 'xdl';\n\nimport CommandError from './CommandError';\n\nfunction addOptions(program) {\n  program\n    .option(\n      '-a, --android',\n      'Opens your app in Expo on a connected Android device'\n    )\n    .option(\n      '-i, --ios',\n      'Opens your app in Expo in a currently running iOS simulator on your computer'\n    )\n    .option(\n      '-m, --host [mode]',\n      'tunnel (default), lan, localhost. Type of host to use. \"tunnel\" allows you to view your link on other networks'\n    )\n    .option(\n      '-p, --protocol [mode]',\n      'exp (default), http, redirect. Type of protocol. \"exp\" is recommended right now'\n    )\n    .option('--tunnel', 'Same as --host tunnel')\n    .option('--lan', 'Same as --host lan')\n    .option('--localhost', 'Same as --host localhost')\n    .option('--dev', 'Turns dev flag on')\n    .option('--no-dev', 'Turns dev flag off')\n    .option('--strict', 'Turns strict flag on')\n    .option('--no-strict', 'Turns strict flag off')\n    .option('--minify', 'Turns minify flag on')\n    .option('--no-minify', 'Turns minify flag off')\n    .option('--exp', 'Same as --protocol exp')\n    .option('--http', 'Same as --protocol http')\n    .option('--redirect', 'Same as --protocol redirect');\n}\n\nfunction hasBooleanArg(rawArgs, argName) {\n  return (\n    _.includes(rawArgs, '--' + argName) ||\n    _.includes(rawArgs, '--no-' + argName)\n  );\n}\n\nfunction getBooleanArg(rawArgs, argName) {\n  if (_.includes(rawArgs, '--' + argName)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nasync function optsAsync(projectDir, options) {\n  var opts = await ProjectSettings.readAsync(projectDir);\n\n  if (\n    !!options.host + !!options.lan + !!options.localhost + !!options.tunnel > 1\n  ) {\n    throw CommandError(\n      'BAD_ARGS',\n      'Specify at most one of --host, --tunnel, --lan, and --localhost'\n    );\n  }\n\n  if (\n    !!options.protocol + !!options.exp + !!options.http + !!options.redirect > 1\n  ) {\n    throw CommandError(\n      'BAD_ARGS',\n      'Specify at most one of --protocol, --exp, --http, and --redirect'\n    );\n  }\n\n  if (options.host) {\n    opts.hostType = options.host;\n  }\n  if (options.tunnel) {\n    opts.hostType = 'tunnel';\n  }\n  if (options.lan) {\n    opts.hostType = 'lan';\n  }\n  if (options.localhost) {\n    opts.hostType = 'localhost';\n  }\n\n  let rawArgs = options.parent.rawArgs;\n  if (hasBooleanArg(rawArgs, 'dev')) {\n    opts.dev = getBooleanArg(rawArgs, 'dev');\n  }\n  if (hasBooleanArg(rawArgs, 'strict')) {\n    opts.strict = getBooleanArg(rawArgs, 'strict');\n  }\n  if (hasBooleanArg(rawArgs, 'minify')) {\n    opts.minify = getBooleanArg(rawArgs, 'minify');\n  }\n\n  if (options.protocol) {\n    opts.urlType = options.protocol;\n  }\n  if (options.exp) {\n    opts.urlType = 'exp';\n  }\n  if (options.http) {\n    opts.urlType = 'http';\n  }\n  if (options.redirect) {\n    opts.urlType = 'redirect';\n  }\n\n  await ProjectSettings.setAsync(projectDir, opts);\n\n  return opts;\n}\n\nfunction printQRCode(url) {\n  qrcodeTerminal.generate(url, code =>\n    console.log(`${indentString(code, 2)}\\n`)\n  );\n}\n\nasync function handleMobileOptsAsync(projectDir, options) {\n  if (options.android) {\n    await Android.openProjectAsync(projectDir);\n  }\n\n  if (options.ios) {\n    await Simulator.openProjectAsync(projectDir);\n  }\n\n  return !!options.android || !!options.ios;\n}\n\nexport default {\n  addOptions,\n  handleMobileOptsAsync,\n  printQRCode,\n  optsAsync,\n};\n"],"sourceRoot":"/Users/jesseruder/exponent/universe/dev/exp/src"}