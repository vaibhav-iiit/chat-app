{"version":3,"sources":["accounts.js"],"names":["getCurrentUserAsync","console","log","yellow","questions","type","name","message","choices","value","prompt","action","login","github","_onboardUser","green","Error","loginOrRegisterIfLoggedOut","options","facebook","_socialAuth","google","token","_tokenAuth","_usernamePasswordAuth","username","password","register","provider","loginAsync","user","userMetadata","onboarded","push","validate","val","trim","answers","data","usernamePass","legacyMigration","kind","currentConnection","default","givenName","familyName","nickname","email","needsPasswordMigration","shouldUpdateUsernamePassword","legacy","registerAsync","registeredUser","initialize"],"mappings":"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","file":"../accounts.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\n\nimport { User as UserManager } from 'xdl';\n\nimport type { LoginType, User, UserOrLegacyUser } from 'xdl/build/User';\n\n// const EXP_CLIENT_ID = 'Zso9S1J7xpRYzT4QNlanGYLL5aBrqy1l';\nUserManager.initialize();\n\ntype CommandOptions = {\n  facebook?: boolean,\n  google?: boolean,\n  github?: boolean,\n  token?: string,\n  username?: string,\n  password?: string,\n};\n\nexport async function loginOrRegisterIfLoggedOut() {\n  if (await UserManager.getCurrentUserAsync()) {\n    return;\n  }\n\n  console.log(chalk.yellow('\\nAn Expo user account is required to proceed.\\n'));\n\n  const questions = [\n    {\n      type: 'list',\n      name: 'action',\n      message: 'How would you like to authenticate?',\n      choices: [\n        {\n          name: 'Make a new Expo account',\n          value: 'register',\n        },\n        {\n          name: 'Log in with an existing Expo account',\n          value: 'existingUser',\n        },\n        {\n          name: 'Cancel',\n          value: 'cancel',\n        },\n      ],\n    },\n  ];\n\n  const { action } = await inquirer.prompt(questions);\n\n  if (action === 'github') {\n    await login({ github: true });\n  } else if (action === 'register') {\n    await _onboardUser();\n    console.log(chalk.green('Thanks!\\n'));\n  } else if (action === 'existingUser') {\n    await login({});\n  } else {\n    throw new Error('Not logged in.');\n  }\n}\n\nexport async function login(options: CommandOptions) {\n  if (options.facebook) {\n    // handle fb login\n    return await _socialAuth('facebook');\n  } else if (options.google) {\n    // handle google login\n    return await _socialAuth('google');\n  } else if (options.github) {\n    // handle github login\n    return await _socialAuth('github');\n  } else if (options.token) {\n    // handle token login\n    return await _tokenAuth(options.token);\n  } else {\n    // handle username/password auth\n    return await _usernamePasswordAuth(options.username, options.password);\n  }\n}\n\nexport async function register(options: CommandOptions) {\n  if (options.github) {\n    // handle github login\n    await _socialAuth('github');\n    console.log('\\nThanks for signing up!');\n  } else {\n    await _onboardUser();\n    console.log('\\nThanks for signing up!');\n  }\n}\n\nasync function _socialAuth(provider: LoginType) {\n  let user = await UserManager.loginAsync(provider);\n  if (user) {\n    if (user.userMetadata.onboarded) {\n      console.log('\\nSuccess.');\n      return user;\n    } else {\n      user = await _onboardUser(user);\n      console.log('\\nSuccess.');\n      return user;\n    }\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nasync function _tokenAuth(token: string) {\n  console.log('\\nStay tuned! This feature is not yet implemented.');\n  return;\n}\n\nasync function _usernamePasswordAuth(\n  username?: string,\n  password?: string\n): Promise<User> {\n  const questions = [];\n  if (!username) {\n    questions.push({\n      type: 'input',\n      name: 'username',\n      message: 'Username/Email Address:',\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  if (!password) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  const answers = await inquirer.prompt(questions);\n\n  const data = {\n    username: username || answers.username,\n    password: password || answers.password,\n  };\n\n  let user = await UserManager.loginAsync('user-pass', data);\n\n  if (user) {\n    if (user.userMetadata.onboarded) {\n      console.log('\\nSuccess.');\n      return user;\n    } else {\n      user = await _onboardUser(user, data);\n      console.log('\\nSuccess.');\n      return user;\n    }\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nasync function _onboardUser(\n  user?: UserOrLegacyUser,\n  usernamePass?: { username: string, password: string }\n): Promise<User> {\n  console.log('');\n\n  const legacyMigration =\n    (user && user.kind === 'legacyUser') ||\n    (user &&\n      user.kind === 'user' &&\n      user.currentConnection === 'Username-Password-Authentication');\n\n  if (user && legacyMigration) {\n    console.log(\n      `Signed in as: @${user.username}\nHi there! We don't currently have any way to identify you if you were to lose\nyour password. Please provide us with your name and e-mail address.`\n    );\n  } else {\n    console.log(\n      `Thanks for signing up for Expo!\nJust a few questions:`\n    );\n  }\n\n  console.log('');\n\n  const questions = [];\n  questions.push(\n    {\n      type: 'input',\n      name: 'givenName',\n      message: 'First Name:',\n      default: (!legacyMigration &&\n        user &&\n        user.kind === 'user' &&\n        user.givenName) ||\n        null,\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    },\n    {\n      type: 'input',\n      name: 'familyName',\n      message: 'Last Name:',\n      default: (!legacyMigration &&\n        user &&\n        user.kind === 'user' &&\n        user.familyName) ||\n        null,\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    }\n  );\n\n  if (!legacyMigration) {\n    // needs a username\n    questions.push({\n      type: 'input',\n      name: 'username',\n      message: 'Username:',\n      default: (user &&\n        user.kind === 'user' &&\n        (user.username || user.nickname)) ||\n        null,\n      validate(val, answers) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  questions.push({\n    type: 'input',\n    name: 'email',\n    message: 'Email Address:',\n    default: (!legacyMigration && user && user.kind === 'user' && user.email) ||\n      null,\n    validate(val) {\n      if (val.trim() === '') {\n        return false;\n      }\n      return true;\n    },\n  });\n\n  if (!legacyMigration || (user && user.userMetadata.needsPasswordMigration)) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  if (!legacyMigration) {\n    questions.push({\n      type: 'password',\n      name: 'passwordRepeat',\n      message: 'Password Repeat:',\n      validate(val, answers) {\n        if (val.trim() === '') {\n          return false;\n        }\n        if (val.trim() !== answers.password.trim()) {\n          return `Passwords don't match!`;\n        }\n        return true;\n      },\n    });\n  }\n\n  const answers = await inquirer.prompt(questions);\n\n  // Don't send user data (username/password) if\n  const shouldUpdateUsernamePassword = !(user &&\n    user.kind === 'user' &&\n    user.userMetadata.legacy);\n\n  const registeredUser = await UserManager.registerAsync(\n    {\n      ...(shouldUpdateUsernamePassword && usernamePass ? usernamePass : {}),\n      ...answers,\n    },\n    user\n  );\n\n  return registeredUser;\n}\n"],"sourceRoot":"/Users/jesseruder/exponent/universe/dev/exp/src"}